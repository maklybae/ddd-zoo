// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package v1

import (
	"fmt"
	"net/http"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for AnimalGender.
const (
	AnimalGenderFemale AnimalGender = "Female"
	AnimalGenderMale   AnimalGender = "Male"
)

// Defines values for AnimalStatus.
const (
	AnimalStatusHealthy AnimalStatus = "Healthy"
	AnimalStatusSick    AnimalStatus = "Sick"
)

// Defines values for AnimalInputGender.
const (
	AnimalInputGenderFemale AnimalInputGender = "Female"
	AnimalInputGenderMale   AnimalInputGender = "Male"
)

// Defines values for AnimalInputStatus.
const (
	AnimalInputStatusHealthy AnimalInputStatus = "Healthy"
	AnimalInputStatusSick    AnimalInputStatus = "Sick"
)

// Animal defines model for Animal.
type Animal struct {
	BirthDate    time.Time          `json:"birthDate"`
	EnclosureId  openapi_types.UUID `json:"enclosureId"`
	FavoriteFood string             `json:"favoriteFood"`
	Gender       AnimalGender       `json:"gender"`
	Id           openapi_types.UUID `json:"id"`
	Name         string             `json:"name"`
	Species      string             `json:"species"`
	Status       AnimalStatus       `json:"status"`
}

// AnimalGender defines model for Animal.Gender.
type AnimalGender string

// AnimalStatus defines model for Animal.Status.
type AnimalStatus string

// AnimalInput defines model for AnimalInput.
type AnimalInput struct {
	BirthDate    time.Time          `json:"birthDate"`
	EnclosureId  openapi_types.UUID `json:"enclosureId"`
	FavoriteFood string             `json:"favoriteFood"`
	Gender       AnimalInputGender  `json:"gender"`
	Name         string             `json:"name"`
	Species      string             `json:"species"`
	Status       AnimalInputStatus  `json:"status"`
}

// AnimalInputGender defines model for AnimalInput.Gender.
type AnimalInputGender string

// AnimalInputStatus defines model for AnimalInput.Status.
type AnimalInputStatus string

// AnimalListResponse defines model for AnimalListResponse.
type AnimalListResponse struct {
	Animals []Animal `json:"animals"`
}

// ApiErrorResponse defines model for ApiErrorResponse.
type ApiErrorResponse struct {
	// Details Additional error details
	Details *map[string]interface{} `json:"details,omitempty"`

	// Error Error type
	Error string `json:"error"`

	// Message Human-readable error message
	Message string `json:"message"`

	// Timestamp When the error occurred
	Timestamp time.Time `json:"timestamp"`
}

// Enclosure defines model for Enclosure.
type Enclosure struct {
	Animals        *[]Animal          `json:"animals,omitempty"`
	CurrentAnimals int                `json:"currentAnimals"`
	Id             openapi_types.UUID `json:"id"`
	MaxCapacity    int                `json:"maxCapacity"`
	Size           int                `json:"size"`
	Type           string             `json:"type"`
}

// EnclosureInput defines model for EnclosureInput.
type EnclosureInput struct {
	MaxCapacity int    `json:"maxCapacity"`
	Size        int    `json:"size"`
	Type        string `json:"type"`
}

// EnclosureListResponse defines model for EnclosureListResponse.
type EnclosureListResponse struct {
	Enclosures []Enclosure `json:"enclosures"`
}

// FeedingSchedule defines model for FeedingSchedule.
type FeedingSchedule struct {
	Animal      Animal             `json:"animal"`
	Completed   bool               `json:"completed"`
	FeedingTime time.Time          `json:"feedingTime"`
	FoodType    string             `json:"foodType"`
	Id          openapi_types.UUID `json:"id"`
}

// FeedingScheduleInput defines model for FeedingScheduleInput.
type FeedingScheduleInput struct {
	AnimalId    openapi_types.UUID `json:"animalId"`
	FeedingTime time.Time          `json:"feedingTime"`
	FoodType    string             `json:"foodType"`
}

// FeedingScheduleListResponse defines model for FeedingScheduleListResponse.
type FeedingScheduleListResponse struct {
	Schedules []FeedingSchedule `json:"schedules"`
}

// MoveAnimalInput defines model for MoveAnimalInput.
type MoveAnimalInput struct {
	NewEnclosureId openapi_types.UUID `json:"newEnclosureId"`
}

// ZooStatistics defines model for ZooStatistics.
type ZooStatistics struct {
	CompletedFeedingsToday int `json:"completedFeedingsToday"`
	FeedingSchedulesCount  int `json:"feedingSchedulesCount"`
	FreeEnclosures         int `json:"freeEnclosures"`
	HealthyAnimals         int `json:"healthyAnimals"`
	PendingFeedingsToday   int `json:"pendingFeedingsToday"`
	SickAnimals            int `json:"sickAnimals"`
	TotalAnimals           int `json:"totalAnimals"`
	TotalEnclosures        int `json:"totalEnclosures"`
}

// PostApiV1AnimalsJSONRequestBody defines body for PostApiV1Animals for application/json ContentType.
type PostApiV1AnimalsJSONRequestBody = AnimalInput

// PostApiV1AnimalsAnimalIdMoveJSONRequestBody defines body for PostApiV1AnimalsAnimalIdMove for application/json ContentType.
type PostApiV1AnimalsAnimalIdMoveJSONRequestBody = MoveAnimalInput

// PostApiV1EnclosuresJSONRequestBody defines body for PostApiV1Enclosures for application/json ContentType.
type PostApiV1EnclosuresJSONRequestBody = EnclosureInput

// PostApiV1FeedingSchedulesJSONRequestBody defines body for PostApiV1FeedingSchedules for application/json ContentType.
type PostApiV1FeedingSchedulesJSONRequestBody = FeedingScheduleInput

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all animals
	// (GET /api/v1/animals)
	GetApiV1Animals(c *gin.Context)
	// Add a new animal
	// (POST /api/v1/animals)
	PostApiV1Animals(c *gin.Context)
	// Delete an animal
	// (DELETE /api/v1/animals/{animalId})
	DeleteApiV1AnimalsAnimalId(c *gin.Context, animalId openapi_types.UUID)
	// Get animal by ID
	// (GET /api/v1/animals/{animalId})
	GetApiV1AnimalsAnimalId(c *gin.Context, animalId openapi_types.UUID)
	// Move an animal to a new enclosure
	// (POST /api/v1/animals/{animalId}/move)
	PostApiV1AnimalsAnimalIdMove(c *gin.Context, animalId openapi_types.UUID)
	// Treat a sick animal
	// (POST /api/v1/animals/{animalId}/treat)
	PostApiV1AnimalsAnimalIdTreat(c *gin.Context, animalId openapi_types.UUID)
	// Get all enclosures
	// (GET /api/v1/enclosures)
	GetApiV1Enclosures(c *gin.Context)
	// Add a new enclosure
	// (POST /api/v1/enclosures)
	PostApiV1Enclosures(c *gin.Context)
	// Delete an enclosure
	// (DELETE /api/v1/enclosures/{enclosureId})
	DeleteApiV1EnclosuresEnclosureId(c *gin.Context, enclosureId openapi_types.UUID)
	// Get enclosure by ID
	// (GET /api/v1/enclosures/{enclosureId})
	GetApiV1EnclosuresEnclosureId(c *gin.Context, enclosureId openapi_types.UUID)
	// Clean an enclosure
	// (POST /api/v1/enclosures/{enclosureId}/clean)
	PostApiV1EnclosuresEnclosureIdClean(c *gin.Context, enclosureId openapi_types.UUID)
	// Get all feeding schedules
	// (GET /api/v1/feeding-schedules)
	GetApiV1FeedingSchedules(c *gin.Context)
	// Add a new feeding schedule
	// (POST /api/v1/feeding-schedules)
	PostApiV1FeedingSchedules(c *gin.Context)
	// Delete a feeding schedule
	// (DELETE /api/v1/feeding-schedules/{scheduleId})
	DeleteApiV1FeedingSchedulesScheduleId(c *gin.Context, scheduleId openapi_types.UUID)
	// Get feeding schedule by ID
	// (GET /api/v1/feeding-schedules/{scheduleId})
	GetApiV1FeedingSchedulesScheduleId(c *gin.Context, scheduleId openapi_types.UUID)
	// Mark a feeding schedule as completed
	// (POST /api/v1/feeding-schedules/{scheduleId}/complete)
	PostApiV1FeedingSchedulesScheduleIdComplete(c *gin.Context, scheduleId openapi_types.UUID)
	// Get zoo statistics
	// (GET /api/v1/statistics)
	GetApiV1Statistics(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetApiV1Animals operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Animals(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1Animals(c)
}

// PostApiV1Animals operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Animals(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1Animals(c)
}

// DeleteApiV1AnimalsAnimalId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1AnimalsAnimalId(c *gin.Context) {

	var err error

	// ------------- Path parameter "animalId" -------------
	var animalId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "animalId", c.Param("animalId"), &animalId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter animalId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiV1AnimalsAnimalId(c, animalId)
}

// GetApiV1AnimalsAnimalId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1AnimalsAnimalId(c *gin.Context) {

	var err error

	// ------------- Path parameter "animalId" -------------
	var animalId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "animalId", c.Param("animalId"), &animalId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter animalId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1AnimalsAnimalId(c, animalId)
}

// PostApiV1AnimalsAnimalIdMove operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1AnimalsAnimalIdMove(c *gin.Context) {

	var err error

	// ------------- Path parameter "animalId" -------------
	var animalId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "animalId", c.Param("animalId"), &animalId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter animalId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1AnimalsAnimalIdMove(c, animalId)
}

// PostApiV1AnimalsAnimalIdTreat operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1AnimalsAnimalIdTreat(c *gin.Context) {

	var err error

	// ------------- Path parameter "animalId" -------------
	var animalId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "animalId", c.Param("animalId"), &animalId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter animalId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1AnimalsAnimalIdTreat(c, animalId)
}

// GetApiV1Enclosures operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Enclosures(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1Enclosures(c)
}

// PostApiV1Enclosures operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Enclosures(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1Enclosures(c)
}

// DeleteApiV1EnclosuresEnclosureId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1EnclosuresEnclosureId(c *gin.Context) {

	var err error

	// ------------- Path parameter "enclosureId" -------------
	var enclosureId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "enclosureId", c.Param("enclosureId"), &enclosureId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter enclosureId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiV1EnclosuresEnclosureId(c, enclosureId)
}

// GetApiV1EnclosuresEnclosureId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1EnclosuresEnclosureId(c *gin.Context) {

	var err error

	// ------------- Path parameter "enclosureId" -------------
	var enclosureId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "enclosureId", c.Param("enclosureId"), &enclosureId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter enclosureId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1EnclosuresEnclosureId(c, enclosureId)
}

// PostApiV1EnclosuresEnclosureIdClean operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1EnclosuresEnclosureIdClean(c *gin.Context) {

	var err error

	// ------------- Path parameter "enclosureId" -------------
	var enclosureId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "enclosureId", c.Param("enclosureId"), &enclosureId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter enclosureId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1EnclosuresEnclosureIdClean(c, enclosureId)
}

// GetApiV1FeedingSchedules operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1FeedingSchedules(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1FeedingSchedules(c)
}

// PostApiV1FeedingSchedules operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1FeedingSchedules(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1FeedingSchedules(c)
}

// DeleteApiV1FeedingSchedulesScheduleId operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1FeedingSchedulesScheduleId(c *gin.Context) {

	var err error

	// ------------- Path parameter "scheduleId" -------------
	var scheduleId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "scheduleId", c.Param("scheduleId"), &scheduleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scheduleId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteApiV1FeedingSchedulesScheduleId(c, scheduleId)
}

// GetApiV1FeedingSchedulesScheduleId operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1FeedingSchedulesScheduleId(c *gin.Context) {

	var err error

	// ------------- Path parameter "scheduleId" -------------
	var scheduleId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "scheduleId", c.Param("scheduleId"), &scheduleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scheduleId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1FeedingSchedulesScheduleId(c, scheduleId)
}

// PostApiV1FeedingSchedulesScheduleIdComplete operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1FeedingSchedulesScheduleIdComplete(c *gin.Context) {

	var err error

	// ------------- Path parameter "scheduleId" -------------
	var scheduleId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "scheduleId", c.Param("scheduleId"), &scheduleId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter scheduleId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostApiV1FeedingSchedulesScheduleIdComplete(c, scheduleId)
}

// GetApiV1Statistics operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Statistics(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetApiV1Statistics(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/api/v1/animals", wrapper.GetApiV1Animals)
	router.POST(options.BaseURL+"/api/v1/animals", wrapper.PostApiV1Animals)
	router.DELETE(options.BaseURL+"/api/v1/animals/:animalId", wrapper.DeleteApiV1AnimalsAnimalId)
	router.GET(options.BaseURL+"/api/v1/animals/:animalId", wrapper.GetApiV1AnimalsAnimalId)
	router.POST(options.BaseURL+"/api/v1/animals/:animalId/move", wrapper.PostApiV1AnimalsAnimalIdMove)
	router.POST(options.BaseURL+"/api/v1/animals/:animalId/treat", wrapper.PostApiV1AnimalsAnimalIdTreat)
	router.GET(options.BaseURL+"/api/v1/enclosures", wrapper.GetApiV1Enclosures)
	router.POST(options.BaseURL+"/api/v1/enclosures", wrapper.PostApiV1Enclosures)
	router.DELETE(options.BaseURL+"/api/v1/enclosures/:enclosureId", wrapper.DeleteApiV1EnclosuresEnclosureId)
	router.GET(options.BaseURL+"/api/v1/enclosures/:enclosureId", wrapper.GetApiV1EnclosuresEnclosureId)
	router.POST(options.BaseURL+"/api/v1/enclosures/:enclosureId/clean", wrapper.PostApiV1EnclosuresEnclosureIdClean)
	router.GET(options.BaseURL+"/api/v1/feeding-schedules", wrapper.GetApiV1FeedingSchedules)
	router.POST(options.BaseURL+"/api/v1/feeding-schedules", wrapper.PostApiV1FeedingSchedules)
	router.DELETE(options.BaseURL+"/api/v1/feeding-schedules/:scheduleId", wrapper.DeleteApiV1FeedingSchedulesScheduleId)
	router.GET(options.BaseURL+"/api/v1/feeding-schedules/:scheduleId", wrapper.GetApiV1FeedingSchedulesScheduleId)
	router.POST(options.BaseURL+"/api/v1/feeding-schedules/:scheduleId/complete", wrapper.PostApiV1FeedingSchedulesScheduleIdComplete)
	router.GET(options.BaseURL+"/api/v1/statistics", wrapper.GetApiV1Statistics)
}
